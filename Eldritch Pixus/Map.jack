class Map {
	// this class is responsible for the static objects of the map
	// momentarily heavily hard-coded
	field Array obstacles;
	field int obstacleCount;
	field Array specialTiles;				// special tiles: 	0 - spider, 1 - door, 2 - shrub,
											//					3 - potion, 4 - key, 5 - ignition powder
	field int specialTilesCount;
	field Array specialTilesMapping;
	
	// stores the curent exit position for proceeding to the next level
	field int exitX;
	field int exitY;
	
	constructor Map new() {
		let obstacles = Array.new(128);
		let obstacleCount = 0;
		let specialTiles = Array.new(64);
		let specialTilesCount = 0;
		let specialTilesMapping = Array.new(64);
		return this;
	}
	
	//////////////////////////////////////////////////
	//////////////// CUSTOM MAP BASE /////////////////
	//////////////////////////////////////////////////
	
	// copy this method and name it to create you own custom map
	method Vector customMap() {
		var Vector entrance;
		var Vector exit;
		var Vector vector;
		var int i;
		
		let exitX = 11;
		let exitY = 0;
		
		let entrance = Vector.new(11,15);
		let exit = Vector.new(exitX,exitY);
		
		do Draw.mapAccessPoints(entrance, exit);
		do entrance.dispose();
		do exit.dispose();
		
		
		
		
		//>>> unique tiles of the map >>>

		//<<< unique tiles of the map <<<
		
		// return starting position
		let vector = Vector.new(11,14);
		return vector;
	}
	
	
	//////////////////////////////////////////////////
	///////////////// EXAMPLE MAPS ///////////////////
	//////////////////////////////////////////////////
	
	// this is an empty map that only needs the player to move to the exit
	method Vector movementTutorial() {
		var Vector entrance;
		var Vector exit;
		var Vector vector;
		var int i;
		
		let exitX = 11;
		let exitY = 0;
		
		let entrance = Vector.new(11,15);
		let exit = Vector.new(exitX,exitY);
		
		do Draw.mapAccessPoints(entrance, exit);
		do entrance.dispose();
		do exit.dispose();
		
		
		
		
		//>>> unique tiles of the map >>>
		
		do placeWoodenWall(Vector.new(6,1), Vector.new(6,14));
		do placeWoodenWall(Vector.new(16,1), Vector.new(16,14));

		//<<< unique tiles of the map <<<
		
		// return starting position
		let vector = Vector.new(11,14);
		return vector;
	}
	
	
	// this is a map that contains all kinds of pickups and obstacles that the player can try, the exit is also free
	method Vector itemsTutorial() {
		var Vector entrance;
		var Vector exit;
		var Vector vector;
		var int i;
		
		let exitX = 11;
		let exitY = 0;
		
		let entrance = Vector.new(11,15);
		let exit = Vector.new(exitX,exitY);
		
		do Draw.mapAccessPoints(entrance, exit);
		do entrance.dispose();
		do exit.dispose();
		
		
		
		
		//>>> unique tiles of the map >>>
		
		do placePotion(Vector.new(1,14));
		do placePotion(Vector.new(1,13));
		do placePotion(Vector.new(1,12));
		do placePotion(Vector.new(1,11));
		do placePotion(Vector.new(1,10));
		do placeKey(Vector.new(1,9));
		do placeKey(Vector.new(1,8));
		do placeKey(Vector.new(1,7));
		do placeKey(Vector.new(1,6));
		do placeKey(Vector.new(1,5));
		do placePowder(Vector.new(1,4));
		do placePowder(Vector.new(1,3));
		do placePowder(Vector.new(1,2));
		do placePowder(Vector.new(1,1));
		
		do placeSpider(Vector.new(22,14));
		do placeSpider(Vector.new(22,13));
		do placeSpider(Vector.new(22,12));
		do placeSpider(Vector.new(22,11));
		do placeSpider(Vector.new(22,10));
		do placeDoor(Vector.new(22,9));
		do placeDoor(Vector.new(22,8));
		do placeDoor(Vector.new(22,7));
		do placeDoor(Vector.new(22,6));
		do placeDoor(Vector.new(22,5));
		do placeShrub(Vector.new(22,4));
		do placeShrub(Vector.new(22,3));
		do placeShrub(Vector.new(22,2));
		do placeShrub(Vector.new(22,1));

		//<<< unique tiles of the map <<<
		
		// return starting position
		let vector = Vector.new(11,14);
		return vector;
	}
	
	// this is a straight forward level that has the player use the items to proceed
	method Vector level1() {
		var Vector entrance;
		var Vector exit;
		var Vector vector;
		var int i;
		
		let exitX = 13;
		let exitY = 0;
		
		let entrance = Vector.new(13,15);
		let exit = Vector.new(exitX,exitY);
		
		do Draw.mapAccessPoints(entrance, exit);
		do entrance.dispose();
		do exit.dispose();
		
		
		
		
		//>>> unique tiles of the map >>>
		
		do placeWoodenWall(Vector.new(6,1), Vector.new(6,14));
		do placeWoodenWall(Vector.new(16,1), Vector.new(16,14));
		do placeWoodenWall(Vector.new(11,2), Vector.new(11,4));
		do placeWoodenWall(Vector.new(11,6), Vector.new(11,8));
		do placeWoodenWall(Vector.new(11,10), Vector.new(11,12));
		
		do placeWoodenWall(Vector.new(12,3), Vector.new(12,3));
		do placeWoodenWall(Vector.new(14,3), Vector.new(15,3));
		
		do placeWoodenWall(Vector.new(12,7), Vector.new(12,7));
		do placeWoodenWall(Vector.new(14,7), Vector.new(15,7));
		
		do placeWoodenWall(Vector.new(12,11), Vector.new(12,11));
		do placeWoodenWall(Vector.new(14,11), Vector.new(15,11));
		
		do placeWoodenWall(Vector.new(7,2), Vector.new(10,2));
		do placeWoodenWall(Vector.new(7,6), Vector.new(10,6));
		do placeWoodenWall(Vector.new(7,10), Vector.new(10,10));
		
		do placeKey(Vector.new(7,11));
		do placePotion(Vector.new(7,7));
		do placePowder(Vector.new(7,3));
		
		do placeDoor(Vector.new(13,11));
		do placeSpider(Vector.new(13,7));
		do placeShrub(Vector.new(13,3));
		
		
		//<<< unique tiles of the map <<<
		
		// return starting position
		let vector = Vector.new(11,14);
		return vector;
	}
	
	// this is an example of a level that has multiple routes that are not all victorious, AKA a small puzzle
	method Vector level2() {
		var Vector entrance;
		var Vector exit;
		var Vector vector;
		var int i;
		
		let exitX = 2;
		let exitY = 0;
		
		let entrance = Vector.new(11,15);
		let exit = Vector.new(exitX,exitY);
		
		do Draw.mapAccessPoints(entrance, exit);
		do entrance.dispose();
		do exit.dispose();
		
		
		
		
		//>>> unique tiles of the map >>>
		
		do placeWoodenWall(Vector.new(8,8), Vector.new(8,12));
		do placeWoodenWall(Vector.new(8,14), Vector.new(8,14));
		do placeWoodenWall(Vector.new(14,8), Vector.new(14,14));
		do placeWoodenWall(Vector.new(9,8), Vector.new(10,8));
		do placeWoodenWall(Vector.new(12,8), Vector.new(13,8));
		do placeWoodenWall(Vector.new(2,11), Vector.new(8,11));
		do placeWoodenWall(Vector.new(2,12), Vector.new(2,14));
		do placeWoodenWall(Vector.new(5,14), Vector.new(5,14));
		do placeWoodenWall(Vector.new(5,12), Vector.new(5,12));
		
		do placeStoneWall(Vector.new(1,3),Vector.new(13,3));
		do placeStoneWall(Vector.new(13,3),Vector.new(13,6));
		do placeStoneWall(Vector.new(13,6),Vector.new(18,6));
		do placeStoneWall(Vector.new(20,6),Vector.new(22,6));
		
		do placeDoor(Vector.new(5,13));
		do placeSpider(Vector.new(11,8));
		do placeShrub(Vector.new(13,7));
		do placeShrub(Vector.new(1,11));
		
		do placeDoor(Vector.new(19,6));
		
		do placeShrub(Vector.new(18,4));
		do placeShrub(Vector.new(19,4));
		do placeShrub(Vector.new(20,4));
		do placeShrub(Vector.new(18,5));
		do placeShrub(Vector.new(19,5));
		do placeShrub(Vector.new(20,5));
		do placeShrub(Vector.new(18,7));
		do placeShrub(Vector.new(19,7));
		do placeShrub(Vector.new(20,7));
		do placeShrub(Vector.new(18,8));
		do placeShrub(Vector.new(19,8));
		do placeShrub(Vector.new(20,8));
		do placeShrub(Vector.new(21,9));
		do placeShrub(Vector.new(22,9));
		
		do placeShrub(Vector.new(17,5));
		do placeShrub(Vector.new(21,5));
		do placeShrub(Vector.new(17,7));
		do placeShrub(Vector.new(21,7));
		
		do placeKey(Vector.new(3,12));
		do placePotion(Vector.new(3,13));
		do placePowder(Vector.new(3,14));
		do placePowder(Vector.new(1,12));
		do placePowder(Vector.new(1,13));
		do placePowder(Vector.new(1,14));
		
		do placePowder(Vector.new(22,7));
		do placePowder(Vector.new(21,8));
		do placePowder(Vector.new(22,8));
		
		
		
		//<<< unique tiles of the map <<<
		
		// return starting position
		let vector = Vector.new(11,14);
		return vector;
	}
	
	// low budget victory screen; thank for trying out the demo!
	method Vector win() {
		var Vector entrance;
		var Vector exit;
		var Vector vector;
		var int i;
		
		let exitX = 11;
		let exitY = 0;
		
		let entrance = Vector.new(11,15);
		let exit = Vector.new(exitX,exitY);
		
		do Draw.mapAccessPoints(entrance, exit);
		do entrance.dispose();
		do exit.dispose();
		
		
		
		
		//>>> unique tiles of the map >>>
		
		do placeShrub(Vector.new(2,2));
		do placeShrub(Vector.new(2,3));
		do placeShrub(Vector.new(3,4));
		do placeShrub(Vector.new(3,5));
		do placeShrub(Vector.new(4,2));
		do placeShrub(Vector.new(4,3));
		do placeShrub(Vector.new(6,2));
		do placeShrub(Vector.new(6,3));
		do placeShrub(Vector.new(6,4));
		do placeShrub(Vector.new(6,5));
		do placeShrub(Vector.new(7,2));
		do placeShrub(Vector.new(7,5));
		do placeShrub(Vector.new(8,2));
		do placeShrub(Vector.new(8,3));
		do placeShrub(Vector.new(8,4));
		do placeShrub(Vector.new(8,5));
		do placeShrub(Vector.new(10,2));
		do placeShrub(Vector.new(10,3));
		do placeShrub(Vector.new(10,4));
		do placeShrub(Vector.new(10,5));
		do placeShrub(Vector.new(11,5));
		do placeShrub(Vector.new(12,2));
		do placeShrub(Vector.new(12,3));
		do placeShrub(Vector.new(12,4));
		do placeShrub(Vector.new(12,5));
		
		do placeShrub(Vector.new(10,7));
		do placeShrub(Vector.new(10,8));
		do placeShrub(Vector.new(10,9));
		do placeShrub(Vector.new(9,10));
		do placeShrub(Vector.new(11,10));
		do placeShrub(Vector.new(8,7));
		do placeShrub(Vector.new(8,8));
		do placeShrub(Vector.new(8,9));
		do placeShrub(Vector.new(12,7));
		do placeShrub(Vector.new(12,8));
		do placeShrub(Vector.new(12,9));
		
		do placeShrub(Vector.new(14,7));
		do placeShrub(Vector.new(14,8));
		do placeShrub(Vector.new(14,9));
		do placeShrub(Vector.new(14,10));
		do placeShrub(Vector.new(15,7));
		do placeShrub(Vector.new(15,10));
		do placeShrub(Vector.new(16,7));
		do placeShrub(Vector.new(16,8));
		do placeShrub(Vector.new(16,9));
		do placeShrub(Vector.new(16,10));
		do placeShrub(Vector.new(18,7));
		do placeShrub(Vector.new(18,8));
		do placeShrub(Vector.new(18,9));
		do placeShrub(Vector.new(18,10));
		do placeShrub(Vector.new(19,8));
		do placeShrub(Vector.new(20,9));
		do placeShrub(Vector.new(21,7));
		do placeShrub(Vector.new(21,8));
		do placeShrub(Vector.new(21,9));
		do placeShrub(Vector.new(21,10));
		

		//<<< unique tiles of the map <<<
		
		// return starting position
		let vector = Vector.new(11,14);
		return vector;
	}
	
	//////////////////////////////////////////////////
	//////////////////////////////////////////////////
	//////////////////////////////////////////////////

	
	////////////////////
	// FOR MAP MAKERS //
	////////////////////
	
	// place array of stone wall tiles between 2 blocks in a line from vector to vector, with obstacles initiated
	method void placeStoneWall(Vector start, Vector end) {
		var int i;
		var int lim;
		
		do Draw.stoneWall(start, end);
		if(start.getX() = end.getX()) {
			let i = start.getY();
			let lim = end.getY() + 1;
			while(i < lim) {
				do addObstacle(Vector.new(start.getX(),i));
				let i = i + 1;
			}
		}
		if(start.getY() = end.getY()) {
			let i = start.getX();
			let lim = end.getX() + 1;
			while(i < lim) {
				do addObstacle(Vector.new(i,start.getY()));
				let i = i + 1;
			}
		}
		return;
	}
	
	// place array of wooden wall tiles in a line from vector to vector, with obstacles initiated
	method void placeWoodenWall(Vector start, Vector end) {
		var int i;
		var int lim;
		
		if(start.getX() = end.getX()) {
			let i = start.getY();
			let lim = end.getY() + 1;
			while(i < lim) {
				do Draw.plank(Vector.new(start.getX(),i));
				do addObstacle(Vector.new(start.getX(),i));
				let i = i + 1;
			}
		}
		if(start.getY() = end.getY()) {
			let i = start.getX();
			let lim = end.getX() + 1;
			while(i < lim) {
				do Draw.plank(Vector.new(i,start.getY()));
				do addObstacle(Vector.new(i,start.getY()));
				let i = i + 1;
			}
		}
		return;
	}

	// place a spider on the map
	method void placeSpider(Vector position) {
		do Draw.spider(position);
		do addObstacle(position);
		do addSpecialTile(position, 0);
		return;
	}
	
	// place a door on the map
	method void placeDoor(Vector position) {
		do Draw.simpleDoor(position);
		do addObstacle(position);
		do addSpecialTile(position, 1);
		return;
	}
	
	// place a shrub on the map
	method void placeShrub(Vector position) {
		do Draw.shrub(position);
		do addObstacle(position);
		do addSpecialTile(position, 2);
		return;
	}
	
	// place a potion on the map
	method void placePotion(Vector position) {
		do Draw.potion(position);
		do addObstacle(position);
		do addSpecialTile(position, 3);
		return;
	}
	
	
	// place a key on the map
	method void placeKey(Vector position) {
		do Draw.key(position);
		do addObstacle(position);
		do addSpecialTile(position, 4);
		return;
	}
	
	
	// place a powder bag on the map
	method void placePowder(Vector position) {
		do Draw.powder(position);
		do addObstacle(position);
		do addSpecialTile(position, 5);
		return;
	}
	
	///////////////////////////////
	// LOGIC // FOR CODE EDITORS //
	///////////////////////////////
		
	// checks if tile is obstacle
	method boolean obstacle(Vector tile) {
		var int i;
		var int tileX;
		var int tileY;
		var int obsX;
		var int obsY;
		var Vector v;
		
		let tileX = tile.getX();
		let tileY = tile.getY();
		let i = 0;
		while(i < obstacleCount) {
			let v = obstacles[i];
			let obsX = v.getX();
			let obsY = v.getY();
			
			if((obsX = tileX)&(obsY = tileY)){
				return true;
			}
			let i = i + 1;
		}
		return false;
	}
	
	// adds new obstacle to the list of the map
	method void addObstacle(Vector tile) {
		let obstacles[obstacleCount] = tile;
		let obstacleCount = obstacleCount + 1;
		return;
	}
	
	// remove obstacle from the map
	method void removeObstacle(Vector tile) {
		var int i;
		var int tileX;
		var int tileY;
		var int obsX;
		var int obsY;
		var Vector v;
		
		let tileX = tile.getX();
		let tileY = tile.getY();
		let i = 0;
		while(i < obstacleCount) {
			let v = obstacles[i];
			let obsX = v.getX();
			let obsY = v.getY();
			
			if((obsX = tileX)&(obsY = tileY)){
				let obstacles[i] = Vector.new(-1,-1);
			}
			let i = i + 1;
		}
		return;
	}
	
	
	
	// inserts a special tile and stores its type in the Mapping array
	method void addSpecialTile(Vector position, int type) {
		let specialTiles[specialTilesCount] = position;
		let specialTilesMapping[specialTilesCount] = type;
		let specialTilesCount = specialTilesCount + 1;
		return;
	}	
	
	// remove special tile
	method void removeSpecialTile(Vector tile) {
		var int i;
		var int tileX;
		var int tileY;
		var int specX;
		var int specY;
		var Vector v;
		
		let tileX = tile.getX();
		let tileY = tile.getY();
		let i = 0;
		while(i < specialTilesCount) {
			let v = specialTiles[i];
			let specX = v.getX();
			let specY = v.getY();
			
			if((specX = tileX)&(specY = tileY)){
				let specialTiles[i] = Vector.new(-1,-1);
			}
			let i = i + 1;
		}
		do removeObstacle(tile);
		do Draw.erase(tile);
		return;
	}
	
	// return true if the tile at *position* is a spider enemy
	method boolean isSpider(Vector position) {
		var int i;
		var Vector target;
		var int x;
		var int y;
		var int targetX;
		var int targetY;
		
		let x = position.getX();
		let y = position.getY();
		
		let i = 0;
		while(i < specialTilesCount) {
			let target = specialTiles[i];
			let targetX = target.getX();
			let targetY = target.getY();
			
			if((x = targetX)&(y = targetY)) {
				if(specialTilesMapping[i] = 0) {
					return true;
				}
			}
			let i = i + 1;
		}
		return false;
	}
	
	// return true if the tile at *position* is a simple door (as opposed to a level ending door)
	method boolean isDoor(Vector position) {
		var int i;
		var Vector target;
		var int x;
		var int y;
		var int targetX;
		var int targetY;
		
		let x = position.getX();
		let y = position.getY();
		
		let i = 0;
		while(i < specialTilesCount) {
			let target = specialTiles[i];
			let targetX = target.getX();
			let targetY = target.getY();
			
			if((x = targetX)&(y = targetY)) {
				if(specialTilesMapping[i] = 1) {
					return true;
				}
			}
			let i = i + 1;
		}
		return false;
	}
	
	// return true if the tile at *position* is a shrub
	method boolean isShrub(Vector position) {
		var int i;
		var Vector target;
		var int x;
		var int y;
		var int targetX;
		var int targetY;
		
		let x = position.getX();
		let y = position.getY();
		
		let i = 0;
		while(i < specialTilesCount) {
			let target = specialTiles[i];
			let targetX = target.getX();
			let targetY = target.getY();
			
			if((x = targetX)&(y = targetY)) {
				if(specialTilesMapping[i] = 2) {
					return true;
				}
			}
			let i = i + 1;
		}
		return false;
	}
	
	// return true if the tile at *position* is a potion to pick up
	method boolean isPotion(Vector position) {
		var int i;
		var Vector target;
		var int x;
		var int y;
		var int targetX;
		var int targetY;
		
		let x = position.getX();
		let y = position.getY();
		
		let i = 0;
		while(i < specialTilesCount) {
			let target = specialTiles[i];
			let targetX = target.getX();
			let targetY = target.getY();
			
			if((x = targetX)&(y = targetY)) {
				if(specialTilesMapping[i] = 3) {
					return true;
				}
			}
			let i = i + 1;
		}
		return false;
	}
	
	// return true if the tile at *position* is a key to pick up
	method boolean isKey(Vector position) {
		var int i;
		var Vector target;
		var int x;
		var int y;
		var int targetX;
		var int targetY;
		
		let x = position.getX();
		let y = position.getY();
		
		let i = 0;
		while(i < specialTilesCount) {
			let target = specialTiles[i];
			let targetX = target.getX();
			let targetY = target.getY();
			
			if((x = targetX)&(y = targetY)) {
				if(specialTilesMapping[i] = 4) {
					return true;
				}
			}
			let i = i + 1;
		}
		return false;
	}
	
	// return true if the tile at *position* is a powder bag to pick up
	method boolean isPowder(Vector position) {
		var int i;
		var Vector target;
		var int x;
		var int y;
		var int targetX;
		var int targetY;
		
		let x = position.getX();
		let y = position.getY();
		
		let i = 0;
		while(i < specialTilesCount) {
			let target = specialTiles[i];
			let targetX = target.getX();
			let targetY = target.getY();
			
			if((x = targetX)&(y = targetY)) {
				if(specialTilesMapping[i] = 5) {
					return true;
				}
			}
			let i = i + 1;
		}
		return false;
	}
	
	// check if exit reached
	method boolean isExit(Vector position) {
		var int x;
		var int y;
		
		let x = position.getX();
		let y = position.getY();
		
		if((x = exitX)&(y = exitY)) {
			return true;
		}
		return false;
	}
	
	// disposal method
	method void dispose() {
		do obstacles.dispose();
		do specialTiles.dispose();
		do specialTilesMapping.dispose();
		do Memory.deAlloc(this);
		return;
	}
}